import time
from datetime import datetime, timezone
from astropy.time import Time
import tzlocal
#import pytz


# fast data import from iso format
import ciso8601 as ciso



# set local timezone and tz aware epoch!
local_tz = tzlocal.get_localzone() 
epoch = datetime.fromtimestamp(0).astimezone(timezone.utc)

# version about 10 time faster than using Time
def kk2epoch(s, tz=local_tz, year_digits='20'):
	"""
	Convert the timestamp generated by the K+K counters to epoch.
	Note that the timestamp is typically in local time.
	
	Parameters
	----------
	t       : timetag
	tz	: timezone, default=local system timezone	
	year_digits  : string, first 2 digits of the year, default='20'
		
	Returns
	-------	
	out     : total_seconds from the epoch
	
	Example
	-------
	
	Use it as a converter for K+K file:
	>>> import tintervals as ti
	>>> data = genfromtxt(fili, delimiter='  ', skip_header=3, skip_footer=1, converters = {0: ti.kk2epoch}, invalid_raise=False, encoding=None)

	
	"""


	# lets try to use ciso8601 to get faster parsing of huge comb file
	# k+k format is *almost* iso
	# i need to add the first 2 digits of the year and replace the * with a space (or a T)
	s = year_digits + s.replace("*", " ")
	date = ciso.parse_datetime(s)
	
	# set local timezone
	if tz:
		date = date.astimezone(tz)

	out = (date- epoch).total_seconds()
	return out



def epoch2mjd(epoch):
	return Time(epoch, format='unix').to_value('mjd') 

def mjd2epoch(mjd):
	return Time(mjd, format='mjd', scale='utc').to_value('mjd') 
	
	
	
	
	
# test


